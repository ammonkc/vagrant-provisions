# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrant Project variables
PROJECT_NAME = dirname = File.basename(Dir.getwd)

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  #-------------------------------------------------
  # Box
  #-------------------------------------------------
  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "CentOS-6.5"

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  config.vm.box_url = "https://dl.dropboxusercontent.com/s/qoaad02jb21dxk5/CentOS-6.5-x86_64-base.box"

  #-------------------------------------------------
  # Network
  #-------------------------------------------------
  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network :forwarded_port, guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network :private_network, ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network :public_network

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  # config.ssh.forward_agent = true

  #-------------------------------------------------
  # Shared Folders
  #-------------------------------------------------
  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"
  config.vm.synced_folder ".", "/vagrant", :nfs => true

  #-------------------------------------------------
  # Hostname
  #-------------------------------------------------
  # The hostname the machine should have. Defaults to nil. If nil,
  # Vagrant won't manage the hostname. If set to a string, the hostname will be set on boot.
  config.vm.hostname = "#{PROJECT_NAME}.vagrant.dev"

  #-------------------------------------------------
  # DNSmasq
  #-------------------------------------------------
  # set domain ending (required)
  # adding this line enables dnsmasq handling
  config.dnsmasq.domain = '.dev'

  # optional configuration ...

  # this plugin runs 'hostname -I' on the guest machine to obtain
  # the guest ip address. you can overwrite this behaviour.
  # config.dnsmasq.ip = '10.0.3.20'

  # config.dnsmasq.ip = proc do |guest_machine|
  #   guest_machine.communicate.sudo("command to obtain ip somehow") do |type, data|
  #     # return something like '10.0.3.20' or ['10.0.3.20', '10.0.3.21']
  #   end
  # end

  # this will prompt you during 'vagrant up' to choose an IP
  # config.dnsmasq.ip = ['10.0.3.20', '10.0.3.21']

  # overwrite default location for /etc/resolver directory
  # config.dnsmasq.resolver = '/etc/resolver'

  # 'vagrant destroy' does not delete /etc/resolver nameserver file, defaults to false
  # config.dnsmasq.keep_resolver_on_destroy = true

  # overwrite default location for /etc/dnsmasq.conf
  brew_prefix = `brew --prefix`.strip
  config.dnsmasq.dnsmasqconf = brew_prefix + '/etc/dnsmasq.conf'

  # command for reloading dnsmasq after config changes
  config.dnsmasq.reload_command = 'sudo launchctl unload /Library/LaunchDaemons/homebrew.mxcl.dnsmasq.plist; sudo launchctl load /Library/LaunchDaemons/homebrew.mxcl.dnsmasq.plist'

  # disable dnsmasq handling
  # config.dnsmasq.disable = true

  #-------------------------------------------------
  # Provider
  #-------------------------------------------------
  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider :virtualbox do |vb|
  #   # Don't boot with headless mode
  #   vb.gui = true
  #
  #   # Use VBoxManage to customize the VM. For example to change memory:
    vb.customize ["modifyvm", :id, "--memory", "1024"]
  end
  #
  # View the documentation for the provider you're using for more
  # information on available options.

  #-------------------------------------------------
  # Provisioning
  #-------------------------------------------------
  # Enable shell provisioning to bootstrap puppet
  # config.vm.provision :shell, :path => "#{BOOTSTRAP_PATH}/bootstrap.sh"

  # Enable provisioning with Puppet stand alone.  Puppet manifests
  # are contained in a directory path relative to this Vagrantfile.
  # You will need to create the manifests directory and a manifest in
  # the file CentOS-6.5.pp in the manifests_path directory.
  #
  # An example Puppet manifest to provision the message of the day:
  #
  # # group { "puppet":
  # #   ensure => "present",
  # # }
  # #
  # # File { owner => 0, group => 0, mode => 0644 }
  # #
  # # file { '/etc/motd':
  # #   content => "Welcome to your Vagrant-built virtual machine!
  # #               Managed by Puppet.\n"
  # # }
  #
  # config.vm.provision :puppet do |puppet|
  #   puppet.module_path = "#{MODULES_PATH}"
  #   puppet.manifests_path = "#{MANIFESTS_PATH}"
  #   puppet.manifest_file  = "default.pp"
  #   puppet.options = ['--verbose']
  #   puppet.facter = {
  #     # "puppet_node" => "lamp.#{HOST_NAME}",
  #     "utils"       => "true"
  #   }
  # end

  # Enable provisioning with chef solo, specifying a cookbooks path, roles
  # path, and data_bags path (all relative to this Vagrantfile), and adding
  # some recipes and/or roles.
  #
  # config.vm.provision :chef_solo do |chef|
  #   chef.cookbooks_path = "../my-recipes/cookbooks"
  #   chef.roles_path = "../my-recipes/roles"
  #   chef.data_bags_path = "../my-recipes/data_bags"
  #   chef.add_recipe "mysql"
  #   chef.add_role "web"
  #
  #   # You may also specify custom JSON attributes:
  #   chef.json = { :mysql_password => "foo" }
  # end

  # Enable provisioning with chef server, specifying the chef server URL,
  # and the path to the validation key (relative to this Vagrantfile).
  #
  # The Opscode Platform uses HTTPS. Substitute your organization for
  # ORGNAME in the URL and validation key.
  #
  # If you have your own Chef Server, use the appropriate URL, which may be
  # HTTP instead of HTTPS depending on your configuration. Also change the
  # validation key to validation.pem.
  #
  # config.vm.provision :chef_client do |chef|
  #   chef.chef_server_url = "https://api.opscode.com/organizations/ORGNAME"
  #   chef.validation_key_path = "ORGNAME-validator.pem"
  # end
  #
  # If you're using the Opscode platform, your validator client is
  # ORGNAME-validator, replacing ORGNAME with your organization name.
  #
  # If you have your own Chef Server, the default validation client name is
  # chef-validator, unless you changed the configuration.
  #
  #   chef.validation_client_name = "ORGNAME-validator"
end
